const { exec } = require('child_process');

// Fun√ß√£o para executar um comando no terminal
function executarComando(comando) {
    return new Promise((resolve, reject) => {
        exec(comando, (erro, stdout, stderr) => {
            if (erro) {
                reject(`Erro ao executar comando: ${erro.message}`);
            }
            if (stderr) {
                console.error(`stderr: ${stderr}`);
            }
            console.log(`stdout: ${stdout}`);
            resolve(stdout);
        });
    });
}

async function renovarBanco() {
    try {
        // Sincroniza os modelos (zera as tabelas)
        console.log('üîÑ Iniciando a sincroniza√ß√£o dos modelos...');
        await executarComando('node syncModels.js');
        console.log('‚úÖ Modelos sincronizados com sucesso.');

        // Importa as eletivas
        console.log('üì• Importando as eletivas...');
        await executarComando('node importEletivas.js eletivas.csv');
        console.log('‚úÖ Eletivas importadas com sucesso.');

        // Importa os estudantes
        console.log('üì• Importando os estudantes...');
        await executarComando('node importEstudantes.js estudantes.csv');
        console.log('‚úÖ Estudantes importados com sucesso.');

        console.log('‚úÖ Banco de dados renovado com sucesso!');
    } catch (error) {
        console.error(`‚ùå Falha ao renovar banco de dados: ${error}`);
    }
}

// Chama a fun√ß√£o para renovar o banco
renovarBanco();
